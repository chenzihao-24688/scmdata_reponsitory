CREATE OR REPLACE PACKAGE SCMDATA.PKG_UPDATE_DATA_DIC_BACKUP IS

  --更新 ALL_CONSTRAINTS_UP
  PROCEDURE P_UPDATE_ALL_CONSTRAINTS_BACKUP;

  --更新 ALL_TABLES_BACKUP
  PROCEDURE P_UPDATE_ALL_TABLES_BACKUP;

  --更新 ALL_TAB_COLUMNS_BACKUP
  PROCEDURE P_UPDATE_ALL_TAB_COLUMNS_BACKUP;

  --更新 ALL_CONS_COLUMNS_BACKUP
  PROCEDURE P_UPDATE_GET_ALL_CONS_COLUMNS_BACKUP;

END PKG_UPDATE_DATA_DIC_BACKUP;
/

CREATE OR REPLACE PACKAGE BODY SCMDATA.PKG_UPDATE_DATA_DIC_BACKUP IS

  --更新 ALL_CONSTRAINTS
  PROCEDURE P_UPDATE_ALL_CONSTRAINTS_BACKUP IS
    JUDGE             NUMBER(4);
    V_OWNER           VARCHAR2(32);
    V_TABNAME         VARCHAR2(128);
    V_CONSTRAINTNAME  VARCHAR2(128);
    ERR_INFO          CLOB;
  BEGIN
    FOR I IN (SELECT *
            FROM (SELECT OWNER, CONSTRAINT_NAME, CONSTRAINT_TYPE, TABLE_NAME, 
                         SEARCH_CONDITION_VC, R_OWNER, R_CONSTRAINT_NAME, 
                         DELETE_RULE, STATUS, DEFERRABLE, DEFERRED, 
                         VALIDATED, GENERATED, BAD, RELY, LAST_CHANGE, 
                         INDEX_OWNER, INDEX_NAME, INVALID, VIEW_RELATED, ORIGIN_CON_ID
                    FROM ALL_CONSTRAINTS
                  MINUS
                  SELECT OWNER, CONSTRAINT_NAME, CONSTRAINT_TYPE, TABLE_NAME, 
                         SEARCH_CONDITION_VC, R_OWNER, R_CONSTRAINT_NAME, 
                         DELETE_RULE, STATUS, DEFERRABLE, DEFERRED, 
                         VALIDATED, GENERATED, BAD, RELY, LAST_CHANGE, 
                         INDEX_OWNER, INDEX_NAME, INVALID, VIEW_RELATED, ORIGIN_CON_ID
                    FROM SCMDATA.ALL_CONSTRAINTS_BACKUP)) LOOP
      SELECT COUNT(1)
        INTO JUDGE
        FROM SCMDATA.ALL_CONSTRAINTS_BACKUP
       WHERE OWNER = I.OWNER
         AND TABLE_NAME = I.TABLE_NAME
         AND CONSTRAINT_NAME = I.CONSTRAINT_NAME;

      V_OWNER := I.OWNER;
      V_TABNAME := I.TABLE_NAME;
      V_CONSTRAINTNAME := I.CONSTRAINT_NAME;

      BEGIN
        IF JUDGE = 0 THEN
          INSERT INTO SCMDATA.ALL_CONSTRAINTS_BACKUP
            (OWNER, CONSTRAINT_NAME, CONSTRAINT_TYPE, TABLE_NAME,SEARCH_CONDITION_VC, R_OWNER,
             R_CONSTRAINT_NAME, DELETE_RULE, STATUS, DEFERRABLE,
             DEFERRED, VALIDATED, GENERATED, BAD, RELY, LAST_CHANGE,
             INDEX_OWNER, INDEX_NAME, INVALID, VIEW_RELATED, ORIGIN_CON_ID)
          VALUES
            (I.OWNER, I.CONSTRAINT_NAME, I.CONSTRAINT_TYPE, I.TABLE_NAME,I.SEARCH_CONDITION_VC, I.R_OWNER,
             I.R_CONSTRAINT_NAME, I.DELETE_RULE, I.STATUS, I.DEFERRABLE,
             I.DEFERRED, I.VALIDATED, I.GENERATED, I.BAD, I.RELY, I.LAST_CHANGE,
             I.INDEX_OWNER, I.INDEX_NAME, I.INVALID, I.VIEW_RELATED, I.ORIGIN_CON_ID);
        ELSE
          UPDATE SCMDATA.ALL_CONSTRAINTS_BACKUP
             SET CONSTRAINT_TYPE  = I.CONSTRAINT_TYPE,
                 SEARCH_CONDITION_VC = I.SEARCH_CONDITION_VC,
                 R_OWNER = I.R_OWNER,
                 R_CONSTRAINT_NAME = I.R_CONSTRAINT_NAME,
                 DELETE_RULE = I.DELETE_RULE,
                 STATUS = I.STATUS,
                 DEFERRABLE = I.DEFERRABLE,
                 DEFERRED = I.DEFERRED,
                 VALIDATED = I.VALIDATED,
                 GENERATED = I.GENERATED,
                 BAD = I.BAD,
                 RELY = I.RELY,
                 LAST_CHANGE = I.LAST_CHANGE,
                 INDEX_OWNER = I.INDEX_OWNER,
                 INDEX_NAME = I.INDEX_NAME,
                 INVALID = I.INVALID,
                 VIEW_RELATED = I.VIEW_RELATED,
                 ORIGIN_CON_ID = I.ORIGIN_CON_ID
           WHERE OWNER = I.OWNER
             AND TABLE_NAME = I.TABLE_NAME
             AND CONSTRAINT_NAME = I.CONSTRAINT_NAME;
        END IF;
        COMMIT;
      EXCEPTION
        WHEN OTHERS THEN
          ERR_INFO := ERR_INFO || CHR(10) ||
                        'OWNER: ' || V_OWNER || CHR(10) ||
                        'TABLE_NAME: ' || V_TABNAME || CHR(10) ||
                        'CONSTRAINT_NAME: ' || V_CONSTRAINTNAME || CHR(10);
          INSERT INTO SCMDATA.T_BACKUP_ERR_LOG
            (BEL_ID, EXE_TIME, ERR_INFO)
          VALUES
            (SCMDATA.F_GET_UUID(), SYSDATE, ERR_INFO);
          COMMIT;
      END;
    END LOOP;
  END P_UPDATE_ALL_CONSTRAINTS_BACKUP;


  --更新 ALL_TABLES
  PROCEDURE P_UPDATE_ALL_TABLES_BACKUP IS
    JUDGE             NUMBER(4);
    V_OWNER           VARCHAR2(32);
    V_TABNAME         VARCHAR2(128);
    ERR_INFO          CLOB;
  BEGIN
    FOR I IN (SELECT *
            FROM (SELECT OWNER,TABLE_NAME,TABLESPACE_NAME,CLUSTER_NAME,IOT_NAME,STATUS,
                         PCT_FREE,PCT_USED,INI_TRANS,MAX_TRANS,INITIAL_EXTENT,NEXT_EXTENT,
                         MIN_EXTENTS,MAX_EXTENTS,PCT_INCREASE,FREELISTS,FREELIST_GROUPS,
                         LOGGING,BACKED_UP,NUM_ROWS,BLOCKS,EMPTY_BLOCKS,AVG_SPACE,
                         CHAIN_CNT,AVG_ROW_LEN,AVG_SPACE_FREELIST_BLOCKS,NUM_FREELIST_BLOCKS,
                         DEGREE,INSTANCES,CACHE,TABLE_LOCK,SAMPLE_SIZE,LAST_ANALYZED,
                         PARTITIONED,IOT_TYPE,TEMPORARY,SECONDARY,NESTED,BUFFER_POOL,
                         FLASH_CACHE,CELL_FLASH_CACHE,ROW_MOVEMENT,GLOBAL_STATS,
                         USER_STATS,DURATION,SKIP_CORRUPT,MONITORING,CLUSTER_OWNER,
                         DEPENDENCIES,COMPRESSION,COMPRESS_FOR,DROPPED,READ_ONLY,
                         SEGMENT_CREATED,RESULT_CACHE,CLUSTERING,ACTIVITY_TRACKING,
                         DML_TIMESTAMP,HAS_IDENTITY,CONTAINER_DATA,INMEMORY,
                         INMEMORY_PRIORITY,INMEMORY_DISTRIBUTE,INMEMORY_COMPRESSION,
                         INMEMORY_DUPLICATE,DEFAULT_COLLATION,DUPLICATED,SHARDED,
                         EXTERNAL,HYBRID,CELLMEMORY,CONTAINERS_DEFAULT,CONTAINER_MAP,
                         EXTENDED_DATA_LINK,EXTENDED_DATA_LINK_MAP,INMEMORY_SERVICE,
                         INMEMORY_SERVICE_NAME,CONTAINER_MAP_OBJECT,MEMOPTIMIZE_READ,
                         MEMOPTIMIZE_WRITE,HAS_SENSITIVE_COLUMN,ADMIT_NULL,DATA_LINK_DML_ENABLED,
                         LOGICAL_REPLICATION
                    FROM ALL_TABLES
                  MINUS
                  SELECT OWNER,TABLE_NAME,TABLESPACE_NAME,CLUSTER_NAME,IOT_NAME,STATUS,
                         PCT_FREE,PCT_USED,INI_TRANS,MAX_TRANS,INITIAL_EXTENT,NEXT_EXTENT,
                         MIN_EXTENTS,MAX_EXTENTS,PCT_INCREASE,FREELISTS,FREELIST_GROUPS,
                         LOGGING,BACKED_UP,NUM_ROWS,BLOCKS,EMPTY_BLOCKS,AVG_SPACE,
                         CHAIN_CNT,AVG_ROW_LEN,AVG_SPACE_FREELIST_BLOCKS,NUM_FREELIST_BLOCKS,
                         DEGREE,INSTANCES,CACHE,TABLE_LOCK,SAMPLE_SIZE,LAST_ANALYZED,
                         PARTITIONED,IOT_TYPE,TEMPORARY,SECONDARY,NESTED,BUFFER_POOL,
                         FLASH_CACHE,CELL_FLASH_CACHE,ROW_MOVEMENT,GLOBAL_STATS,
                         USER_STATS,DURATION,SKIP_CORRUPT,MONITORING,CLUSTER_OWNER,
                         DEPENDENCIES,COMPRESSION,COMPRESS_FOR,DROPPED,READ_ONLY,
                         SEGMENT_CREATED,RESULT_CACHE,CLUSTERING,ACTIVITY_TRACKING,
                         DML_TIMESTAMP,HAS_IDENTITY,CONTAINER_DATA,INMEMORY,
                         INMEMORY_PRIORITY,INMEMORY_DISTRIBUTE,INMEMORY_COMPRESSION,
                         INMEMORY_DUPLICATE,DEFAULT_COLLATION,DUPLICATED,SHARDED,
                         EXTERNAL,HYBRID,CELLMEMORY,CONTAINERS_DEFAULT,CONTAINER_MAP,
                         EXTENDED_DATA_LINK,EXTENDED_DATA_LINK_MAP,INMEMORY_SERVICE,
                         INMEMORY_SERVICE_NAME,CONTAINER_MAP_OBJECT,MEMOPTIMIZE_READ,
                         MEMOPTIMIZE_WRITE,HAS_SENSITIVE_COLUMN,ADMIT_NULL,DATA_LINK_DML_ENABLED,
                         LOGICAL_REPLICATION
                    FROM SCMDATA.ALL_TABLES_BACKUP)) LOOP
      SELECT COUNT(1)
        INTO JUDGE
        FROM SCMDATA.ALL_TABLES_BACKUP
       WHERE OWNER = I.OWNER
         AND TABLE_NAME = I.TABLE_NAME;

      V_OWNER := I.OWNER;
      V_TABNAME := I.TABLE_NAME;

      BEGIN
        IF JUDGE = 0 THEN
          INSERT INTO SCMDATA.ALL_TABLES_BACKUP
            (OWNER,TABLE_NAME,TABLESPACE_NAME,CLUSTER_NAME,IOT_NAME,STATUS,
             PCT_FREE,PCT_USED,INI_TRANS,MAX_TRANS,INITIAL_EXTENT,NEXT_EXTENT,
             MIN_EXTENTS,MAX_EXTENTS,PCT_INCREASE,FREELISTS,FREELIST_GROUPS,
             LOGGING,BACKED_UP,NUM_ROWS,BLOCKS,EMPTY_BLOCKS,AVG_SPACE,
             CHAIN_CNT,AVG_ROW_LEN,AVG_SPACE_FREELIST_BLOCKS,NUM_FREELIST_BLOCKS,
             DEGREE,INSTANCES,CACHE,TABLE_LOCK,SAMPLE_SIZE,LAST_ANALYZED,
             PARTITIONED,IOT_TYPE,TEMPORARY,SECONDARY,NESTED,BUFFER_POOL,
             FLASH_CACHE,CELL_FLASH_CACHE,ROW_MOVEMENT,GLOBAL_STATS,
             USER_STATS,DURATION,SKIP_CORRUPT,MONITORING,CLUSTER_OWNER,
             DEPENDENCIES,COMPRESSION,COMPRESS_FOR,DROPPED,READ_ONLY,
             SEGMENT_CREATED,RESULT_CACHE,CLUSTERING,ACTIVITY_TRACKING,
             DML_TIMESTAMP,HAS_IDENTITY,CONTAINER_DATA,INMEMORY,
             INMEMORY_PRIORITY,INMEMORY_DISTRIBUTE,INMEMORY_COMPRESSION,
             INMEMORY_DUPLICATE,DEFAULT_COLLATION,DUPLICATED,SHARDED,
             EXTERNAL,HYBRID,CELLMEMORY,CONTAINERS_DEFAULT,CONTAINER_MAP,
             EXTENDED_DATA_LINK,EXTENDED_DATA_LINK_MAP,INMEMORY_SERVICE,
             INMEMORY_SERVICE_NAME,CONTAINER_MAP_OBJECT,MEMOPTIMIZE_READ,
             MEMOPTIMIZE_WRITE,HAS_SENSITIVE_COLUMN,ADMIT_NULL,DATA_LINK_DML_ENABLED,
             LOGICAL_REPLICATION)
          VALUES
            (I.OWNER,I.TABLE_NAME,I.TABLESPACE_NAME,I.CLUSTER_NAME,I.IOT_NAME,I.STATUS,
             I.PCT_FREE,I.PCT_USED,I.INI_TRANS,I.MAX_TRANS,I.INITIAL_EXTENT,I.NEXT_EXTENT,
             I.MIN_EXTENTS,I.MAX_EXTENTS,I.PCT_INCREASE,I.FREELISTS,I.FREELIST_GROUPS,
             I.LOGGING,I.BACKED_UP,I.NUM_ROWS,I.BLOCKS,I.EMPTY_BLOCKS,I.AVG_SPACE,
             I.CHAIN_CNT,I.AVG_ROW_LEN,I.AVG_SPACE_FREELIST_BLOCKS,I.NUM_FREELIST_BLOCKS,
             I.DEGREE,I.INSTANCES,I.CACHE,I.TABLE_LOCK,I.SAMPLE_SIZE,I.LAST_ANALYZED,
             I.PARTITIONED,I.IOT_TYPE,I.TEMPORARY,I.SECONDARY,I.NESTED,I.BUFFER_POOL,
             I.FLASH_CACHE,I.CELL_FLASH_CACHE,I.ROW_MOVEMENT,I.GLOBAL_STATS,
             I.USER_STATS,I.DURATION,I.SKIP_CORRUPT,I.MONITORING,I.CLUSTER_OWNER,
             I.DEPENDENCIES,I.COMPRESSION,I.COMPRESS_FOR,I.DROPPED,I.READ_ONLY,
             I.SEGMENT_CREATED,I.RESULT_CACHE,I.CLUSTERING,I.ACTIVITY_TRACKING,
             I.DML_TIMESTAMP,I.HAS_IDENTITY,I.CONTAINER_DATA,I.INMEMORY,
             I.INMEMORY_PRIORITY,I.INMEMORY_DISTRIBUTE,I.INMEMORY_COMPRESSION,
             I.INMEMORY_DUPLICATE,I.DEFAULT_COLLATION,I.DUPLICATED,I.SHARDED,
             I.EXTERNAL,I.HYBRID,I.CELLMEMORY,I.CONTAINERS_DEFAULT,I.CONTAINER_MAP,
             I.EXTENDED_DATA_LINK,I.EXTENDED_DATA_LINK_MAP,I.INMEMORY_SERVICE,
             I.INMEMORY_SERVICE_NAME,I.CONTAINER_MAP_OBJECT,I.MEMOPTIMIZE_READ,
             I.MEMOPTIMIZE_WRITE,I.HAS_SENSITIVE_COLUMN,I.ADMIT_NULL,I.DATA_LINK_DML_ENABLED,
             I.LOGICAL_REPLICATION);
        ELSE
          UPDATE SCMDATA.ALL_TABLES_BACKUP
             SET OWNER = I.OWNER,
                 TABLE_NAME = I.TABLE_NAME,
                 TABLESPACE_NAME = I.TABLESPACE_NAME,
                 CLUSTER_NAME = I.CLUSTER_NAME,
                 IOT_NAME = I.IOT_NAME,
                 STATUS = I.STATUS,
                 PCT_FREE = I.PCT_FREE,
                 PCT_USED = I.PCT_USED,
                 INI_TRANS = I.INI_TRANS,
                 MAX_TRANS = I.MAX_TRANS,
                 INITIAL_EXTENT = I.INITIAL_EXTENT,
                 NEXT_EXTENT = I.NEXT_EXTENT,
                 MIN_EXTENTS = I.MIN_EXTENTS,
                 MAX_EXTENTS = I.MAX_EXTENTS,
                 PCT_INCREASE = I.PCT_INCREASE,
                 FREELISTS = I.FREELISTS,
                 FREELIST_GROUPS = I.FREELIST_GROUPS,
                 LOGGING = I.LOGGING,
                 BACKED_UP = I.BACKED_UP,
                 NUM_ROWS = I.NUM_ROWS,
                 BLOCKS = I.BLOCKS,
                 EMPTY_BLOCKS = I.EMPTY_BLOCKS,
                 AVG_SPACE = I.AVG_SPACE,
                 CHAIN_CNT = I.CHAIN_CNT,
                 AVG_ROW_LEN = I.AVG_ROW_LEN,
                 AVG_SPACE_FREELIST_BLOCKS = I.AVG_SPACE_FREELIST_BLOCKS,
                 NUM_FREELIST_BLOCKS = I.NUM_FREELIST_BLOCKS,
                 DEGREE = I.DEGREE,
                 INSTANCES = I.INSTANCES,
                 CACHE = I.CACHE,
                 TABLE_LOCK = I.TABLE_LOCK,
                 SAMPLE_SIZE = I.SAMPLE_SIZE,
                 LAST_ANALYZED = I.LAST_ANALYZED,
                 PARTITIONED = I.PARTITIONED,
                 IOT_TYPE = I.IOT_TYPE,
                 TEMPORARY = I.TEMPORARY,
                 SECONDARY = I.SECONDARY,
                 NESTED = I.NESTED,
                 BUFFER_POOL = I.BUFFER_POOL,
                 FLASH_CACHE = I.FLASH_CACHE,
                 CELL_FLASH_CACHE = I.CELL_FLASH_CACHE,
                 ROW_MOVEMENT = I.ROW_MOVEMENT,
                 GLOBAL_STATS = I.GLOBAL_STATS,
                 USER_STATS = I.USER_STATS,
                 DURATION = I.DURATION,
                 SKIP_CORRUPT = I.SKIP_CORRUPT,
                 MONITORING = I.MONITORING,
                 CLUSTER_OWNER = I.CLUSTER_OWNER,
                 DEPENDENCIES = I.DEPENDENCIES,
                 COMPRESSION = I.COMPRESSION,
                 COMPRESS_FOR = I.COMPRESS_FOR,
                 DROPPED = I.DROPPED,
                 READ_ONLY = I.READ_ONLY,
                 SEGMENT_CREATED = I.SEGMENT_CREATED,
                 RESULT_CACHE = I.RESULT_CACHE,
                 CLUSTERING = I.CLUSTERING,
                 ACTIVITY_TRACKING = I.ACTIVITY_TRACKING,
                 DML_TIMESTAMP = I.DML_TIMESTAMP,
                 HAS_IDENTITY = I.HAS_IDENTITY,
                 CONTAINER_DATA = I.CONTAINER_DATA,
                 INMEMORY = I.INMEMORY,
                 INMEMORY_PRIORITY = I.INMEMORY_PRIORITY,
                 INMEMORY_DISTRIBUTE = I.INMEMORY_DISTRIBUTE,
                 INMEMORY_COMPRESSION = I.INMEMORY_COMPRESSION,
                 INMEMORY_DUPLICATE = I.INMEMORY_DUPLICATE,
                 DEFAULT_COLLATION = I.DEFAULT_COLLATION,
                 DUPLICATED = I.DUPLICATED,
                 SHARDED = I.SHARDED,
                 EXTERNAL = I.EXTERNAL,
                 HYBRID = I.HYBRID,
                 CELLMEMORY = I.CELLMEMORY,
                 CONTAINERS_DEFAULT = I.CONTAINERS_DEFAULT,
                 CONTAINER_MAP = I.CONTAINER_MAP,
                 EXTENDED_DATA_LINK = I.EXTENDED_DATA_LINK,
                 EXTENDED_DATA_LINK_MAP = I.EXTENDED_DATA_LINK_MAP,
                 INMEMORY_SERVICE = I.INMEMORY_SERVICE,
                 INMEMORY_SERVICE_NAME = I.INMEMORY_SERVICE_NAME,
                 CONTAINER_MAP_OBJECT = I.CONTAINER_MAP_OBJECT,
                 MEMOPTIMIZE_READ = I.MEMOPTIMIZE_READ,
                 MEMOPTIMIZE_WRITE = I.MEMOPTIMIZE_WRITE,
                 HAS_SENSITIVE_COLUMN = I.HAS_SENSITIVE_COLUMN,
                 ADMIT_NULL = I.ADMIT_NULL,
                 DATA_LINK_DML_ENABLED = I.DATA_LINK_DML_ENABLED,
                 LOGICAL_REPLICATION = I.LOGICAL_REPLICATION
           WHERE OWNER = I.OWNER
             AND TABLE_NAME = I.TABLE_NAME;
        END IF;
        COMMIT;
      EXCEPTION
        WHEN OTHERS THEN
          ERR_INFO := ERR_INFO || CHR(10) ||
                        'OWNER: ' || V_OWNER || CHR(10) ||
                        'TABLE_NAME: ' || V_TABNAME || CHR(10);
          INSERT INTO SCMDATA.T_BACKUP_ERR_LOG
            (BEL_ID, EXE_TIME, ERR_INFO)
          VALUES
            (SCMDATA.F_GET_UUID(), SYSDATE, ERR_INFO);
          COMMIT;
      END;
    END LOOP;
  END P_UPDATE_ALL_TABLES_BACKUP;


  PROCEDURE P_UPDATE_ALL_TAB_COLUMNS_BACKUP IS
    JUDGE             NUMBER(4);
    V_OWNER           VARCHAR2(32);
    V_TABNAME         VARCHAR2(128);
    V_COLNAME         VARCHAR2(128);
    ERR_INFO          CLOB;
  BEGIN
    FOR I IN (SELECT *
            FROM (SELECT OWNER,TABLE_NAME,COLUMN_NAME,DATA_TYPE,DATA_TYPE_MOD,
                         DATA_TYPE_OWNER,DATA_LENGTH,DATA_PRECISION,DATA_SCALE,
                         NULLABLE,COLUMN_ID,DEFAULT_LENGTH,NUM_DISTINCT,DENSITY,NUM_NULLS,
                         NUM_BUCKETS,LAST_ANALYZED,SAMPLE_SIZE,CHARACTER_SET_NAME,
                         CHAR_COL_DECL_LENGTH,GLOBAL_STATS,USER_STATS,AVG_COL_LEN,
                         CHAR_LENGTH,CHAR_USED,V80_FMT_IMAGE,DATA_UPGRADED,
                         HISTOGRAM,DEFAULT_ON_NULL,IDENTITY_COLUMN,EVALUATION_EDITION,
                         UNUSABLE_BEFORE,UNUSABLE_BEGINNING,COLLATION
                    FROM ALL_TAB_COLUMNS
                   MINUS
                   SELECT OWNER,TABLE_NAME,COLUMN_NAME,DATA_TYPE,DATA_TYPE_MOD,
                          DATA_TYPE_OWNER,DATA_LENGTH,DATA_PRECISION,DATA_SCALE,
                          NULLABLE,COLUMN_ID,DEFAULT_LENGTH,NUM_DISTINCT,DENSITY,NUM_NULLS,
                          NUM_BUCKETS,LAST_ANALYZED,SAMPLE_SIZE,CHARACTER_SET_NAME,
                          CHAR_COL_DECL_LENGTH,GLOBAL_STATS,USER_STATS,AVG_COL_LEN,
                          CHAR_LENGTH,CHAR_USED,V80_FMT_IMAGE,DATA_UPGRADED,
                          HISTOGRAM,DEFAULT_ON_NULL,IDENTITY_COLUMN,EVALUATION_EDITION,
                          UNUSABLE_BEFORE,UNUSABLE_BEGINNING,COLLATION
                     FROM SCMDATA.ALL_TAB_COLUMNS_BACKUP)) LOOP
      SELECT COUNT(1)
        INTO JUDGE
        FROM SCMDATA.ALL_TAB_COLUMNS_BACKUP
       WHERE OWNER = I.OWNER
         AND TABLE_NAME = I.TABLE_NAME
         AND COLUMN_NAME = I.COLUMN_NAME;

      V_OWNER := I.OWNER;
      V_TABNAME := I.TABLE_NAME;
      V_COLNAME := I.COLUMN_NAME;

      BEGIN
        IF JUDGE = 0 THEN
          INSERT INTO SCMDATA.ALL_TAB_COLUMNS_BACKUP
            (OWNER,TABLE_NAME,COLUMN_NAME,DATA_TYPE,DATA_TYPE_MOD,
             DATA_TYPE_OWNER,DATA_LENGTH,DATA_PRECISION,DATA_SCALE,
             NULLABLE,COLUMN_ID,DEFAULT_LENGTH,NUM_DISTINCT,DENSITY,NUM_NULLS,
             NUM_BUCKETS,LAST_ANALYZED,SAMPLE_SIZE,CHARACTER_SET_NAME,
             CHAR_COL_DECL_LENGTH,GLOBAL_STATS,USER_STATS,AVG_COL_LEN,
             CHAR_LENGTH,CHAR_USED,V80_FMT_IMAGE,DATA_UPGRADED,
             HISTOGRAM,DEFAULT_ON_NULL,IDENTITY_COLUMN,EVALUATION_EDITION,
             UNUSABLE_BEFORE,UNUSABLE_BEGINNING,COLLATION)
          VALUES
            (I.OWNER,I.TABLE_NAME,I.COLUMN_NAME,I.DATA_TYPE,I.DATA_TYPE_MOD,
             I.DATA_TYPE_OWNER,I.DATA_LENGTH,I.DATA_PRECISION,I.DATA_SCALE,
             I.NULLABLE,I.COLUMN_ID,I.DEFAULT_LENGTH,I.NUM_DISTINCT,
             I.DENSITY,I.NUM_NULLS,I.NUM_BUCKETS,I.LAST_ANALYZED,I.SAMPLE_SIZE,I.CHARACTER_SET_NAME,
             I.CHAR_COL_DECL_LENGTH,I.GLOBAL_STATS,I.USER_STATS,I.AVG_COL_LEN,
             I.CHAR_LENGTH,I.CHAR_USED,I.V80_FMT_IMAGE,I.DATA_UPGRADED,
             I.HISTOGRAM,I.DEFAULT_ON_NULL,I.IDENTITY_COLUMN,I.EVALUATION_EDITION,
             I.UNUSABLE_BEFORE,I.UNUSABLE_BEGINNING,I.COLLATION);
        ELSE
          UPDATE SCMDATA.ALL_TAB_COLUMNS_BACKUP
             SET DATA_TYPE = I.DATA_TYPE,
                 DATA_TYPE_MOD = I.DATA_TYPE_MOD,
                 DATA_TYPE_OWNER = I.DATA_TYPE_OWNER,
                 DATA_LENGTH = I.DATA_LENGTH,
                 DATA_PRECISION = I.DATA_PRECISION,
                 DATA_SCALE = I.DATA_SCALE,
                 NULLABLE = I.NULLABLE,
                 COLUMN_ID = I.COLUMN_ID,
                 DEFAULT_LENGTH = I.DEFAULT_LENGTH,
                 NUM_DISTINCT = I.NUM_DISTINCT,
                 DENSITY = I.DENSITY,
                 NUM_NULLS = I.NUM_NULLS,
                 NUM_BUCKETS = I.NUM_BUCKETS,
                 LAST_ANALYZED = I.LAST_ANALYZED,
                 SAMPLE_SIZE = I.SAMPLE_SIZE,
                 CHARACTER_SET_NAME = I.CHARACTER_SET_NAME,
                 CHAR_COL_DECL_LENGTH = I.CHAR_COL_DECL_LENGTH,
                 GLOBAL_STATS = I.GLOBAL_STATS,
                 USER_STATS = I.USER_STATS,
                 AVG_COL_LEN = I.AVG_COL_LEN,
                 CHAR_LENGTH = I.CHAR_LENGTH,
                 CHAR_USED = I.CHAR_USED,
                 V80_FMT_IMAGE = I.V80_FMT_IMAGE,
                 DATA_UPGRADED = I.DATA_UPGRADED,
                 HISTOGRAM = I.HISTOGRAM,
                 DEFAULT_ON_NULL = I.DEFAULT_ON_NULL,
                 IDENTITY_COLUMN = I.IDENTITY_COLUMN,
                 EVALUATION_EDITION = I.EVALUATION_EDITION,
                 UNUSABLE_BEFORE = I.UNUSABLE_BEFORE,
                 UNUSABLE_BEGINNING = I.UNUSABLE_BEGINNING,
                 COLLATION = I.COLLATION
         WHERE OWNER = I.OWNER
           AND TABLE_NAME = I.TABLE_NAME
           AND COLUMN_NAME = I.COLUMN_NAME;
        END IF;
        COMMIT;
        EXCEPTION
          WHEN OTHERS THEN
            ERR_INFO := ERR_INFO || CHR(10) ||
                          'OWNER: ' || V_OWNER || CHR(10) ||
                          'TABLE_NAME: ' || V_TABNAME || CHR(10) ||
                          'COLUMN_NAME: ' || V_COLNAME;
            INSERT INTO SCMDATA.T_BACKUP_ERR_LOG
              (BEL_ID, EXE_TIME, ERR_INFO)
            VALUES
              (SCMDATA.F_GET_UUID(), SYSDATE, ERR_INFO);
            COMMIT;
      END;
    END LOOP;
  END P_UPDATE_ALL_TAB_COLUMNS_BACKUP;



  PROCEDURE P_UPDATE_GET_ALL_CONS_COLUMNS_BACKUP IS
    JUDGE             NUMBER(4);
    V_OWNER           VARCHAR2(32);
    V_TABNAME         VARCHAR2(128);
    V_CONSTRAINTNAME  VARCHAR2(128);
    ERR_INFO          CLOB;
  BEGIN
    FOR I IN (SELECT *
                FROM (SELECT OWNER,CONSTRAINT_NAME,TABLE_NAME,COLUMN_NAME,POSITION
                        FROM ALL_CONS_COLUMNS
                      MINUS
                      SELECT OWNER,CONSTRAINT_NAME,TABLE_NAME,COLUMN_NAME,POSITION
                        FROM SCMDATA.ALL_CONS_COLUMNS_BACKUP)) LOOP
      SELECT COUNT(1)
        INTO JUDGE
        FROM SCMDATA.ALL_CONS_COLUMNS_BACKUP
       WHERE OWNER = I.OWNER
         AND TABLE_NAME = I.TABLE_NAME
         AND CONSTRAINT_NAME = I.CONSTRAINT_NAME;

      V_OWNER := I.OWNER;
      V_TABNAME := I.TABLE_NAME;
      V_CONSTRAINTNAME := I.CONSTRAINT_NAME;

      BEGIN
        IF JUDGE = 0 THEN
          INSERT INTO SCMDATA.ALL_CONS_COLUMNS_BACKUP
            (OWNER,CONSTRAINT_NAME,TABLE_NAME,COLUMN_NAME,POSITION)
          VALUES
            (I.OWNER,I.CONSTRAINT_NAME,I.TABLE_NAME,I.COLUMN_NAME,I.POSITION);
        ELSE
          UPDATE SCMDATA.ALL_CONS_COLUMNS_BACKUP
             SET COLUMN_NAME = I.COLUMN_NAME,
                 POSITION = I.POSITION
           WHERE OWNER = I.OWNER
             AND TABLE_NAME = I.TABLE_NAME
             AND CONSTRAINT_NAME = I.CONSTRAINT_NAME;
        END IF;
        COMMIT;
        EXCEPTION
          WHEN OTHERS THEN
            ERR_INFO := ERR_INFO || CHR(10) ||
                          'OWNER: ' || V_OWNER || CHR(10) ||
                          'TABLE_NAME: ' || V_TABNAME || CHR(10) ||
                          'CONSTRAINT_NAME: ' || V_CONSTRAINTNAME;
            INSERT INTO SCMDATA.T_BACKUP_ERR_LOG
              (BEL_ID, EXE_TIME, ERR_INFO)
            VALUES
              (SCMDATA.F_GET_UUID(), SYSDATE, ERR_INFO);
            COMMIT;
      END;
    END LOOP;
  END P_UPDATE_GET_ALL_CONS_COLUMNS_BACKUP;


END PKG_UPDATE_DATA_DIC_BACKUP;
/

